<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plays</title>
    <style>
        .div-with-borders {
            border-top: 1px solid black;
            border-bottom: 1px solid black;
        }
    </style>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <h1>Plays</h1>

                <div id="playList">
                    <!-- Список объектов Play будет отображаться здесь -->
                </div>

                <h2>Create New Play</h2>
                <form id="createPlayForm" enctype="multipart/form-data">
                    <div>
                        <label for="name">Name:</label>
                        <input type="text" class="form-control" id="PlayNameId" name="name" required>
                    </div>
                    <div>
                        <label for="description">Description:</label>
                        <input type="text" class="form-control" id="PlayDescriptionFormId" name="description" required>
                    </div>
                    <div>
                        <label for="picture">Picture:</label>
                        <input type="file" class="form-control" id="PlayPictureFileId" name="picture" required>
                    </div>
                    <button type="submit">Create</button>
                </form>

                <!-- Форма редактирования будет создана динамически -->

                <script>
                    const playList = document.getElementById("playList");
                    const createPlayForm = document.getElementById("createPlayForm");

                    // Функция для отображения изображения из двоичных данных
                    function displayImage(base64data, extension) {
                        if (base64data && extension) {
                            return `data:image/${extension};base64,${base64data}`;
                        }
                        return "";
                    }


                    // Загрузить список объектов Play при загрузке страницы
                    fetch("/api/Play/GetAll",
                        {
                            method: 'GET',
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                            },
                        }
                    )
                        .then(response => response.json())
                        .then(data => {
                            data.forEach(play => {
                                const playDiv = document.createElement("div");
                                playDiv.setAttribute("class", "div-with-borders");
                                playDiv.setAttribute("data-play-id", play.id);
                                const imageUrl = displayImage(play.pictureData, play.pictureExtension);
                                playDiv.innerHTML = `
                                                    <h3>${play.name}</h3>
                                                    <p>${play.description}</p>
                                                    <img src="${imageUrl}" alt="${play.name}" width="200">
                                                    <button onclick="deletePlay(${play.id})">Delete</button>
                                                    <button onclick="editPlay(${play.id}, '${play.name}', '${play.description}')">Edit</button>
                                                `;
                                playList.appendChild(playDiv);
                            });
                        });

                    // Обработчик отправки формы создания Play
                    createPlayForm.addEventListener("submit", async (e) => {
                        e.preventDefault();

                        const formData = new FormData();
                        formData.append("pictureFile", document.getElementById("PlayPictureFileId").files[0]);

                        const PlayName = document.getElementById("PlayNameId").value;
                        const PlayDescription = document.getElementById("PlayDescriptionFormId").value;

                        const url = `/api/Play/Create?name=${encodeURIComponent(PlayName)}&Description=${encodeURIComponent(PlayDescription)}`;

                        const response = await fetch(url, {
                            method: "POST",
                            body: formData,
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                            }
                        });

                        if (response.ok) {
                            // Обновить список после успешного создания
                            location.reload();
                        } else {
                            alert("Failed to create Play.");
                        }
                    });


                    function deletePlay(id) {
                        if (confirm("Are you sure you want to delete this Play?")) {
                            fetch(`/api/Play/Delete?id=${id}`, {
                                method: "DELETE",
                                headers: {
                                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                                },
                            })
                                .then(response => {
                                    if (response.ok) {
                                        // Обновить список после успешного удаления
                                        location.reload();
                                    } else {
                                        alert("Failed to delete Play.");
                                    }
                                });
                        }
                    }

                    function editPlay(id, name, description) {
                        // Создать форму редактирования
                        const editForm = document.createElement("form");
                        editForm.id = "editPlayForm";
                        editForm.enctype = "multipart/form-data";
                        editForm.innerHTML = `
                                                                            <input type="hidden" id="editId" name="id" value="${id}">
                                                                            <div>
                                                                                <label for="editName">Name:</label>
                                                                                <input type="text" class="form-control" id="PlayEditName" name="name" value="${name}" required>
                                                                            </div>
                                                                            <div>
                                                                                <label for="editDescription">Description:</label>
                                                                                <input type="text" class="form-control" id="PlayEditDescription" name="description" value="${description}" required>
                                                                            </div>
                                                                            <div>
                                                                                <label for="editPicture">Picture:</label>
                                                                                <input type="file" class="form-control" id="PlayEditPicture" name="picture">
                                                                            </div>
                                                                            <button type="submit">Save Changes</button>
                                                                        `;

                        // Заменить форму редактирования на странице
                        const playDiv = document.querySelector(`[data-play-id="${id}"]`);
                        if (playDiv) {
                            playDiv.innerHTML = "";
                            playDiv.appendChild(editForm);
                        } else {
                            console.error(`Element with data-play-id="${id}" not found.`);
                        }

                        // Обработчик отправки формы редактирования Play
                        editForm.addEventListener("submit", async (e) => {
                            e.preventDefault();

                            const formData = new FormData();
                            formData.append("pictureFile", document.getElementById("PlayEditPicture").files[0]);

                            const PlayName = document.getElementById("PlayEditName").value;
                            const PlayDescription = document.getElementById("PlayEditDescription").value;

                            const url = `/api/Play/Update?name=${encodeURIComponent(PlayName)}&Description=${encodeURIComponent(PlayDescription)}&PlayId=${encodeURIComponent(id)}`;

                            const response = await fetch(url, {
                                method: "PUT",
                                body: formData,
                                headers: {
                                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                                },
                            });

                            if (response.ok) {
                                // Обновить список после успешного редактирования
                                location.reload();
                            } else {
                                alert(`Failed to update Play. ${response.data}`);
                            }
                        });
                    }
                </script>
            </div>
            <div class="col-md-4">
                <h1>Halls</h1>

                <div id="HallList">
                    <!-- Список объектов Play будет отображаться здесь -->
                </div>

                <h2>Create New Hall</h2>
                <form id="createHallForm" enctype="multipart/form-data">
                    <div>
                        <label for="name">Name:</label>
                        <input type="text" class="form-control" id="HallNameId" name="name" required>
                    </div>
                    <div>
                        <label for="description">Size:</label>
                        <input type="number" class="form-control" id="HallSizeFormId" min="0" pattern="\d+" name="size" required>
                    </div>
                    <button type="submit">Create</button>
                </form>

                <!-- Форма редактирования будет создана динамически -->

                <script>
                    const hallList = document.getElementById("HallList");
                    const createHallForm = document.getElementById("createHallForm");

                    // Функция для отображения изображения из двоичных данных
                    function displayImage(base64data, extension) {
                        if (base64data && extension) {
                            return `data:image/${extension};base64,${base64data}`;
                        }
                        return "";
                    }


                    // Загрузить список объектов Play при загрузке страницы
                    fetch("/api/Hall/GetAll",
                        {
                            method: 'GET',
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                            },
                        }
                    )
                        .then(response => response.json())
                        .then(data => {
                            data.forEach(hall => {
                                const hallDiv = document.createElement("div");
                                hallDiv.setAttribute("class", "div-with-borders");
                                hallDiv.setAttribute("data-hall-id", hall.id);
                                hallDiv.innerHTML = `
                                                                                    <h3>${hall.name}</h3>
                                                                                    <p>Size ${hall.size}</p>
                                                                                    <button onclick="deleteHall(${hall.id})">Delete</button>
                                                                                    <!--<button onclick="editHall(${hall.id}, '${hall.name}', '${hall.size}')">Edit</button>-->
                                                                                `;
                                hallList.appendChild(hallDiv);
                            });
                        });

                    // Обработчик отправки формы создания Hall
                    createHallForm.addEventListener("submit", async (e) => {
                        e.preventDefault();

                        const createHallObject = {
                            name: document.getElementById("HallNameId").value,
                            size: document.getElementById("HallSizeFormId").value
                        };

                        const response = await fetch('/api/Hall/Create', {
                            method: "POST",
                            body: JSON.stringify(createHallObject),
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                                'Content-Type': 'application/json'
                            }
                        });

                        if (response.ok) {
                            // Обновить список после успешного создания
                            location.reload();
                        } else {
                            alert("Failed to create Play.");
                        }
                    });


                    function deleteHall(id) {
                        if (confirm("Are you sure you want to delete this Hall?")) {
                            fetch(`/api/Hall/Delete?id=${id}`, {
                                method: "DELETE",
                                headers: {
                                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                                },
                            })
                                .then(response => {
                                    if (response.ok) {
                                        // Обновить список после успешного удаления
                                        location.reload();
                                    } else {
                                        alert("Failed to delete Hall.");
                                    }
                                });
                        }
                    }

                    function editHall(id, name, size) {
                        // Создать форму редактирования
                        const editForm = document.createElement("form");
                        editForm.id = "editHallForm";
                        editForm.enctype = "multipart/form-data";
                        editForm.innerHTML = `
                                                                            <input type="hidden" id="editId" name="id" value="${id}">
                                                                            <div>
                                                                                <label for="editName">Name:</label>
                                                                                <input type="text" class="form-control" id="HallEditName" name="name" value="${name}" required>
                                                                            </div>
                                                                            <div>
                                                                                <label for="editSize">Size:</label>
                                                                                <input type="text" class="form-control" id="HallEditSize" name="size" value="${size}" required>
                                                                            </div>
                                                                            <button type="submit">Save Changes</button>
                                                                        `;

                        // Заменить форму редактирования на странице
                        const hallDiv = document.querySelector(`[data-hall-id="${id}"]`);
                        if (hallDiv) {
                            hallDiv.innerHTML = "";
                            hallDiv.appendChild(editForm);
                        } else {
                            console.error(`Element with data-hall-id="${id}" not found.`);
                        }

                        // Обработчик отправки формы редактирования Play
                        editForm.addEventListener("submit", async (e) => {
                            e.preventDefault();

                            const createHallObject = {
                                name: document.getElementById("HallNameId").value,
                                size: document.getElementById("HallDescriptionFormId").value
                            };

                            const response = await fetch('/api/Hall/Update', {
                                method: "PUT",
                                body: createHallObject,
                                headers: {
                                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                                }
                            });

                            if (response.ok) {
                                // Обновить список после успешного редактирования
                                location.reload();
                            } else {
                                alert(`Failed to update Hall. ${response.data}`);
                            }
                        });
                    }
                </script>
            </div>
            <div class="col-md-4">
                <h1>Sessions</h1>

                <div id="SessionList">
                    <!-- Список объектов Session будет отображаться здесь -->
                </div>

                <h2>Create New Session</h2>
                <form id="createSessionForm" enctype="multipart/form-data">
                    <div>
                        <label for="DateFrom">Date From:</label>
                        <input type="datetime-local" class="form-control" id="SessionDateFrom" name="DateFrom" required>
                    </div>
                    <div>
                        <label for="DateTo">Date To:</label>
                        <input type="datetime-local" class="form-control" id="SessionDateTo" name="DateTo" required>
                    </div>
                    <div>
                        <label for="PlayId">Play:</label>
                        <select id="SessionPlayId" class="form-control" name="PlayId" required></select>
                    </div>
                    <div>
                        <label for="HallId">Hall:</label>
                        <select id="SessionHallId" class="form-control" name="HallId" required></select>
                    </div>
                    <button type="submit">Create</button>
                </form>
                <script>
                    const sessionList = document.getElementById("SessionList");
                    const createSessionForm = document.getElementById("createSessionForm");
                    const sessionPlayDropdown = document.getElementById("SessionPlayId");
                    const sessionHallDropdown = document.getElementById("SessionHallId");

                    // Загрузить список объектов Session при загрузке страницы
                    fetch("/api/Session/GetAll",
                        {
                            method: 'GET',
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                            },
                        }
                    )
                        .then(response => response.json())
                        .then(data => {
                            data.forEach(session => {
                                const sessionDiv = document.createElement("div");
                                sessionDiv.setAttribute("class", "div-with-borders");
                                sessionDiv.setAttribute("data-session-id", session.id);
                                sessionDiv.innerHTML = `
                                                                <h3>Session</h3>
                                                                <p>Play Name: ${session.play.name}<p>
                                                                <p>Hall Name: ${session.hall.name}<p>
                                                                <p>Session start: ${session.dateFrom}</p>
                                                                <p>Session end: ${session.dateTo}</p>
                                                                <button onclick="deleteSession(${session.id})">Delete</button>
                                                            `;
                                sessionList.appendChild(sessionDiv);
                            });
                        });

                    // Заполнение выпадающего списка Play и Hall
                    fetch("/api/Play/GetAll", {
                        headers: { 'Authorization': `Bearer ${localStorage.getItem('jwtToken')}` }
                    })
                        .then(response => response.json())
                        .then(plays => {
                            plays.forEach(play => {
                                const option = document.createElement("option");
                                option.value = play.id;
                                option.innerText = play.name;
                                sessionPlayDropdown.appendChild(option);
                            });
                        });

                    fetch("/api/Hall/GetAll", {
                        headers: { 'Authorization': `Bearer ${localStorage.getItem('jwtToken')}` }
                    })
                        .then(response => response.json())
                        .then(halls => {
                            halls.forEach(hall => {
                                const option = document.createElement("option");
                                option.value = hall.id;
                                option.innerText = hall.name;
                                sessionHallDropdown.appendChild(option);
                            });
                        });

                    // Обработчик отправки формы создания Session
                    createSessionForm.addEventListener("submit", async (e) => {
                        e.preventDefault();

                        const createSessionObject = {
                            DateFrom: document.getElementById("SessionDateFrom").value,
                            DateTo: document.getElementById("SessionDateTo").value,
                            PlayId: parseInt(document.getElementById("SessionPlayId").value),
                            HallId: parseInt(document.getElementById("SessionHallId").value)
                        };

                        const response = await fetch('/api/Session/Create', {
                            method: "POST",
                            body: JSON.stringify(createSessionObject),
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                                'Content-Type': 'application/json'
                            }
                        });

                        if (response.ok) {
                            // Обновить список после успешного создания
                            location.reload();
                        } else {
                            alert("Failed to create Session.");
                        }
                    });

                    function deleteSession(id) {
                        if (confirm("Are you sure you want to delete this Session?")) {
                            fetch(`/api/Session/Delete?id=${id}`, {
                                method: "DELETE",
                                headers: {
                                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                                },
                            })
                                .then(response => {
                                    if (response.ok) {
                                        // Обновить список после успешного удаления
                                        location.reload();
                                    } else {
                                        alert("Failed to delete Session.");
                                    }
                                });
                        }
                    }

                </script>
            </div>
        </div>
        <!--Bootdtrap scripts-->>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
