<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plays</title>
</head>
<body>
    <h1>Plays</h1>

    <div id="playList">
        <!-- Список объектов Play будет отображаться здесь -->
    </div>

    <h2>Create New Play</h2>
    <form id="createPlayForm" enctype="multipart/form-data">
        <div>
            <label for="name">Name:</label>
            <input type="text" id="PlayNameId" name="name" required>
        </div>
        <div>
            <label for="description">Description:</label>
            <input type="text" id="PlayDescriptionFormId" name="description" required>
        </div>
        <div>
            <label for="picture">Picture:</label>
            <input type="file" id="PlayPictureFileId" name="picture" required>
        </div>
        <button type="submit">Create</button>
    </form>

    <!-- Форма редактирования будет создана динамически -->

    <script>
        const playList = document.getElementById("playList");
        const createPlayForm = document.getElementById("createPlayForm");

        // Загрузить список объектов Play при загрузке страницы
        fetch("/api/Play/GetAll",
                {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                    },
                }
            )
            .then(response => response.json())
            .then(data => {
                data.forEach(play => {
                    const playDiv = document.createElement("div");
                    playDiv.setAttribute("data-play-id", play.id);
                    playDiv.innerHTML = `
                                <h3>${play.name}</h3>
                                <p>${play.description}</p>
                                <img src="/api/Play/GetPicture?id=${play.id}" alt="${play.name}" width="200">
                                <button onclick="deletePlay(${play.id})">Delete</button>
                                <button onclick="editPlay(${play.id}, '${play.name}', '${play.description}')">Edit</button>
                            `;
                    playList.appendChild(playDiv);
                });
            });

        // Обработчик отправки формы создания Play
        createPlayForm.addEventListener("submit", async (e) => {
            e.preventDefault();

            const formData = new FormData();
            formData.append("pictureFile", document.getElementById("PlayPictureFileId").files[0]);

            const PlayName = document.getElementById("PlayNameId").value;
            const PlayDescription = document.getElementById("PlayDescriptionFormId").value;

            const url = `/api/Play/Create?name=${encodeURIComponent(PlayName)}&Description=${encodeURIComponent(PlayDescription)}`;

            const response = await fetch(url, {
                method: "POST",
                body: formData,
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });

            if (response.ok) {
                // Обновить список после успешного создания
                location.reload();
            } else {
                alert("Failed to create Play.");
            }
        });


        function deletePlay(id) {
            if (confirm("Are you sure you want to delete this Play?")) {
                fetch(`/api/Play/Delete?id=${id}`, {
                    method: "DELETE",
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                    },
                })
                    .then(response => {
                        if (response.ok) {
                            // Обновить список после успешного удаления
                            location.reload();
                        } else {
                            alert("Failed to delete Play.");
                        }
                    });
            }
        }

        function editPlay(id, name, description) {
            // Создать форму редактирования
            const editForm = document.createElement("form");
            editForm.id = "editPlayForm";
            editForm.enctype = "multipart/form-data";
            editForm.innerHTML = `
                        <input type="hidden" id="editId" name="id" value="${id}">
                        <div>
                            <label for="editName">Name:</label>
                            <input type="text" id="PlayEditName" name="name" value="${name}" required>
                        </div>
                        <div>
                            <label for="editDescription">Description:</label>
                            <input type="text" id="PlayEditDescription" name="description" value="${description}" required>
                        </div>
                        <div>
                            <label for="editPicture">Picture:</label>
                            <input type="file" id="PlayEditPicture" name="picture">
                        </div>
                        <button type="submit">Save Changes</button>
                    `;

            // Заменить форму редактирования на странице
            const playDiv = document.querySelector(`[data-play-id="${id}"]`);
            if (playDiv) {
                playDiv.innerHTML = "";
                playDiv.appendChild(editForm);
            } else {
                console.error(`Element with data-play-id="${id}" not found.`);
            }

            // Обработчик отправки формы редактирования Play
            editForm.addEventListener("submit", async (e) => {
                e.preventDefault();

                const formData = new FormData();
                formData.append("pictureFile", document.getElementById("PlayEditPicture").files[0]);

                const PlayName = document.getElementById("PlayEditName").value;
                const PlayDescription = document.getElementById("PlayEditDescription").value;

                const url = `/api/Play/Update?name=${encodeURIComponent(PlayName)}&Description=${encodeURIComponent(PlayDescription)}&PlayId=${encodeURIComponent(id)}`;

                const response = await fetch(url, {
                    method: "PUT",
                    body: formData,
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`,
                    },
                });

                if (response.ok) {
                    // Обновить список после успешного редактирования
                    alert(response.data);
                    location.reload();
                } else {
                    alert(`Failed to update Play. ${response.data}`);
                }
            });
        }
    </script>
</body>
</html>
